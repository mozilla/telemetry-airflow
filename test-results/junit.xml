<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="13" skipped="0" tests="52" time="7.238" timestamp="2023-11-17T14:13:44.062996" hostname="Alekhyas-MBP.lan"><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022-01-01-2022-01-02-2-0-None]" time="0.005" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022-01-01-2022-01-20-20-0-None]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022-01-02-2022-01-01-0-1-DateRangeException]" time="0.002" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022/01/01-2022-01-02-0-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022-01-01-2022/01/02-0-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[None-2022/01/02-0-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[2022-01-01-None-0-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_backfill[None-None-0-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_run[2022-01-01-True-0-None]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_run[2022/01/01-False-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_run[None-False-2-SystemExit]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_validate[tests/cli/test_configs/valid.yaml-0-None]" time="0.002"><failure message="AssertionError: assert &lt;class 'FileNotFoundError'&gt; == None">runner = &lt;click.testing.CliRunner object at 0x123bb1e70&gt;, input_config = 'tests/cli/test_configs/valid.yaml', expected_exit_code = 0, expected_exception = None

    @pytest.mark.parametrize(
        "input_config,expected_exit_code,expected_exception",
        [
            ("tests/cli/test_configs/valid.yaml", 0, None),
            (
                "tests/cli/test_configs/missing_dim_config_key.yaml",
                1,
                DimConfigError,
            ),
            ("tests/cli/test_configs/missing_tier.yaml", 1, DimConfigError),
        ],
    )
    def test_validate(runner, input_config, expected_exit_code, expected_exception):
        result = runner.invoke(validate, [input_config])
    
        actual_exit_code = result.exit_code
    
        if actual_exit_code != 0:
&gt;           assert result.exc_info[0] == expected_exception
E           AssertionError: assert &lt;class 'FileNotFoundError'&gt; == None

src/dim/tests/cli/test_cli.py:145: AssertionError</failure></testcase><testcase classname="src.dim.tests.cli.test_cli" name="test_validate[tests/cli/test_configs/missing_dim_config_key.yaml-1-DimConfigError]" time="0.002"><failure message="AssertionError: assert &lt;class 'FileNotFoundError'&gt; == &lt;class 'dim.error.DimConfigError'&gt;">runner = &lt;click.testing.CliRunner object at 0x123bb89a0&gt;, input_config = 'tests/cli/test_configs/missing_dim_config_key.yaml', expected_exit_code = 1
expected_exception = &lt;class 'dim.error.DimConfigError'&gt;

    @pytest.mark.parametrize(
        "input_config,expected_exit_code,expected_exception",
        [
            ("tests/cli/test_configs/valid.yaml", 0, None),
            (
                "tests/cli/test_configs/missing_dim_config_key.yaml",
                1,
                DimConfigError,
            ),
            ("tests/cli/test_configs/missing_tier.yaml", 1, DimConfigError),
        ],
    )
    def test_validate(runner, input_config, expected_exit_code, expected_exception):
        result = runner.invoke(validate, [input_config])
    
        actual_exit_code = result.exit_code
    
        if actual_exit_code != 0:
&gt;           assert result.exc_info[0] == expected_exception
E           AssertionError: assert &lt;class 'FileNotFoundError'&gt; == &lt;class 'dim.error.DimConfigError'&gt;

src/dim/tests/cli/test_cli.py:145: AssertionError</failure></testcase><testcase classname="src.dim.tests.cli.test_cli" name="test_validate[tests/cli/test_configs/missing_tier.yaml-1-DimConfigError]" time="0.002"><failure message="AssertionError: assert &lt;class 'FileNotFoundError'&gt; == &lt;class 'dim.error.DimConfigError'&gt;">runner = &lt;click.testing.CliRunner object at 0x123bb90c0&gt;, input_config = 'tests/cli/test_configs/missing_tier.yaml', expected_exit_code = 1
expected_exception = &lt;class 'dim.error.DimConfigError'&gt;

    @pytest.mark.parametrize(
        "input_config,expected_exit_code,expected_exception",
        [
            ("tests/cli/test_configs/valid.yaml", 0, None),
            (
                "tests/cli/test_configs/missing_dim_config_key.yaml",
                1,
                DimConfigError,
            ),
            ("tests/cli/test_configs/missing_tier.yaml", 1, DimConfigError),
        ],
    )
    def test_validate(runner, input_config, expected_exit_code, expected_exception):
        result = runner.invoke(validate, [input_config])
    
        actual_exit_code = result.exit_code
    
        if actual_exit_code != 0:
&gt;           assert result.exc_info[0] == expected_exception
E           AssertionError: assert &lt;class 'FileNotFoundError'&gt; == &lt;class 'dim.error.DimConfigError'&gt;

src/dim/tests/cli/test_cli.py:145: AssertionError</failure></testcase><testcase classname="src.dim.tests.cli.test_cli" name="test_mute[2022-01-01-None-None-0-1-None]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_mute[None-None-None-1-0-CmdDateInfoNotProvidedException]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_mute[None-2022-01-02-2022-01-01-1-0-DateRangeException]" time="0.002" /><testcase classname="src.dim.tests.cli.test_cli" name="test_mute[None-2022-01-01-2022-01-10-0-10-None]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_unmute[2022-01-01-None-None-0-1-None]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_unmute[None-None-None-1-0-CmdDateInfoNotProvidedException]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_unmute[None-2022-01-02-2022-01-01-1-0-DateRangeException]" time="0.003" /><testcase classname="src.dim.tests.cli.test_cli" name="test_unmute[None-2022-01-01-2022-01-10-0-10-None]" time="0.004" /><testcase classname="src.dim.tests.dim_checks.test_column_length.test_column_length" name="test_column_length" time="0.013"><failure message="jinja2.exceptions.TemplateNotFound: column_length.sql.jinja">def test_column_length():
        """Checking that sql is correctly generated for the column length"""
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: akommasani@mozilla.com
                slack: alekhya
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_2
              dim_tests:
                - type: column_length
                  params:
                    columns:
                      - country
                    condition: "= 2"
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = ColumnLength(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1990-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_column_length/test_column_length.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123c61bd0&gt;, environment = &lt;jinja2.environment.Environment object at 0x123c62b90&gt;, template = 'column_length.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: column_length.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_combined_column_uniqueness.test_combined_column_uniqueness" name="test_combined_column_uniqueness" time="0.004"><failure message="jinja2.exceptions.TemplateNotFound: combined_column_uniqueness.sql.jinja">def test_combined_column_uniqueness():
        """
        Checking that sql is correctly generated
        for the combined column uniqueness
        """
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: combined_column_uniqueness
                  params:
                    columns:
                    - project_id
                    - dataset
                    - table
                    - date_partition
    
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = CombinedColumnUniqueness(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_combined_column_uniqueness/test_combined_column_uniqueness.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123bd1a20&gt;, environment = &lt;jinja2.environment.Environment object at 0x123bd0850&gt;
template = 'combined_column_uniqueness.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: combined_column_uniqueness.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_compare_row_count_to_table.test_compare_row_count_to_table" name="test_compare_row_count_to_table" time="0.003"><failure message="jinja2.exceptions.TemplateNotFound: compare_row_count_to_table.sql.jinja">def test_compare_row_count_to_table():
        """Checking that sql is correctly generated for the compare row count to table check"""  # noqa: E501
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_2
              dim_tests:
                - type: compare_row_count_to_table
                  params:
                    table: dummy2_project.dummy2_dataset.dummy2_table
                    table_partition_field: submission_date2
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = CompareRowCountToTable(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1990-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_compare_row_count_to_table/test_compare_row_count_to_table.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123d105b0&gt;, environment = &lt;jinja2.environment.Environment object at 0x123d13280&gt;
template = 'compare_row_count_to_table.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: compare_row_count_to_table.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_custom_sql.test_custom_sql" name="test_custom_sql" time="0.004"><failure message="jinja2.exceptions.TemplateNotFound: custom_sql_metric.sql.jinja">def test_custom_sql():
        """Checking that sql is correctly generated for the custom sql metrics"""
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_2
              dim_tests:
                - type: custom_sql_metric
                  params:
                    sql: |
                      SELECT COUNT(*) AS count
                      FROM `{{ project_id }}.{{ dataset }}.{{ table }}`
                      WHERE project_id = "data-monitoring-dev"
                    condition: "count = 0"
                    """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = CustomSqlMetric(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1990-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_custom_sql/test_custom_sql.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123bd2fe0&gt;, environment = &lt;jinja2.environment.Environment object at 0x123bd1ea0&gt;, template = 'custom_sql_metric.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: custom_sql_metric.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_matches_regex.test_matches_regex" name="test_matches_regex" time="0.004"><failure message="jinja2.exceptions.TemplateNotFound: matches_regex.sql.jinja">def test_matches_regex():
        """Checking that sql is correctly generated for the matching regex check"""
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: matches_regex
                  params:
                    columns:
                      - locale
                    regex: ^23
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = MatchesRegex(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_matches_regex/test_matches_regex.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123d58a30&gt;, environment = &lt;jinja2.environment.Environment object at 0x123d589d0&gt;, template = 'matches_regex.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: matches_regex.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_not_null.test_not_null" name="test_not_null" time="0.003"><failure message="jinja2.exceptions.TemplateNotFound: not_null.sql.jinja">def test_not_null():
        """
        Checking that sql is correctly generated
        for the not null column check
        """
    
        table = "desination_project.destination_dataset.destination_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: not_null
                  params:
                    columns:
                    - age
                    - country
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = NotNull(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_not_null/test_not_null.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123e2d540&gt;, environment = &lt;jinja2.environment.Environment object at 0x123e2d390&gt;, template = 'not_null.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: not_null.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_numeric_values_matches.test_numeric_values_matches" name="test_numeric_values_matches" time="0.003"><failure message="jinja2.exceptions.TemplateNotFound: numeric_values_matches.sql.jinja">def test_numeric_values_matches():
        """
        Checking that sql is correctly generated
        for the uniqueness check
        """
    
        table = "desination_project.destination_dataset.destination_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: numeric_values_matches
                  params:
                    columns:
                    - age
                    condition: "&gt; 10"
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = NumericValueMatches(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_numeric_values_matches/test_numeric_values_matches.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123b81510&gt;, environment = &lt;jinja2.environment.Environment object at 0x123b83fd0&gt;, template = 'numeric_values_matches.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: numeric_values_matches.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_table_row_count.test_table_row_count" name="test_table_row_count" time="0.004"><failure message="jinja2.exceptions.TemplateNotFound: table_row_count.sql.jinja">def test_table_row_count():
        """Checking that sql is correctly generated for the table row count check"""  # noqa: E501
    
        table = "desination_project.destination_dataset.destination_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: table_row_count
                  params:
                    condition: "&gt;= 1000"
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = TableRowCount(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_table_row_count/test_table_row_count.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123e2efb0&gt;, environment = &lt;jinja2.environment.Environment object at 0x123e2e2c0&gt;, template = 'table_row_count.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: table_row_count.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_uniqueness.test_uniqueness" name="test_uniqueness" time="0.003"><failure message="jinja2.exceptions.TemplateNotFound: uniqueness.sql.jinja">def test_uniqueness():
        """Checking that sql is correctly generated for the uniqueness check"""
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: uniqueness
                  params:
                    columns:
                      - client_id
                      - another_unique_column
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = Uniqueness(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_uniqueness/test_uniqueness.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123bbb790&gt;, environment = &lt;jinja2.environment.Environment object at 0x123bba170&gt;, template = 'uniqueness.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: uniqueness.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="src.dim.tests.dim_checks.test_value_in_set.test_value_in_set" name="test_value_in_set" time="0.003"><failure message="jinja2.exceptions.TemplateNotFound: value_in_set.sql.jinja">def test_value_in_set():
        """Checking that sql is correctly generated for the value in set check"""
    
        table = "dummy_project.dummy_dataset.dummy_table"
    
        yaml_config = dedent(
            """
            dim_config:
              owner:
                email: dummy@mozilla.com
                slack: dummy
              alerts_enabled:
                enabled: true
                notify:
                  channels:
                    - dummy_channel
              partition_field: submission_date
              tier: tier_3
              dim_tests:
                - type: value_in_set
                  params:
                    columns:
                      - os
                    expected_values:
                      - ios
                      - android
            """
        )
    
        dim_config = DimConfig.from_dict(
            yaml.load(yaml_config, Loader=yaml.Loader)["dim_config"]
        )
    
        dim_check = ValueInSet(*table.split("."))
        check_params = dim_config.dim_tests[0].params
    
        query_params = prepare_params(
            *table.split("."),
            dim_config=dim_config,
            alert_muted=False,
            check_params=check_params,
            run_uuid="unit_test_run",
            date_partition="1970-01-01",
        )
&gt;       _, generated_sql = dim_check.generate_test_sql(params=query_params)

src/dim/tests/dim_checks/test_value_in_set/test_value_in_set.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../dim/dim/models/dim_check_type/base.py:57: in generate_test_sql
    generated_sql = self.render_sql(params=render_params)
../dim/dim/models/dim_check_type/base.py:40: in render_sql
    template = templateEnv.get_template(self.dim_check_type + dim.const.TEMPLATE_FILE_EXTENSION)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:1010: in get_template
    return self._load_template(name, globals)
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/environment.py:969: in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:126: in load
    source, filename, uptodate = self.get_source(environment, name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x123c60820&gt;, environment = &lt;jinja2.environment.Environment object at 0x123c61480&gt;, template = 'value_in_set.sql.jinja'

    def get_source(
        self, environment: "Environment", template: str
    ) -&gt; t.Tuple[str, str, t.Callable[[], bool]]:
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            # Use posixpath even on Windows to avoid "drive:" or UNC
            # segments breaking out of the search directory.
            filename = posixpath.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = os.path.getmtime(filename)
    
            def uptodate() -&gt; bool:
                try:
                    return os.path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            # Use normpath to convert Windows altsep to sep.
            return contents, os.path.normpath(filename), uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: value_in_set.sql.jinja

../.pyenv/versions/3.10.8/lib/python3.10/site-packages/jinja2/loaders.py:218: TemplateNotFound</failure></testcase><testcase classname="tests.test_timetable" name="test_manual_interval" time="0.001" /><testcase classname="tests.test_timetable" name="test_first_automated_interval" time="0.001" /><testcase classname="tests.test_timetable" name="test_first_automated_interval_no_catchup" time="0.001" /><testcase classname="tests.test_timetable" name="test_next_automated_interval" time="0.001" /><testcase classname="tests.test_timetable" name="test_last_automated_interval" time="0.001" /><testcase classname="tests.dags.test_dag_validity" name="test_dag_validity" time="3.288" /><testcase classname="tests.dags.test_dag_validity" name="test_dag_tags" time="0.001" /><testcase classname="tests.dags.test_dag_validity" name="test_dag_tags_required" time="0.001" /><testcase classname="tests.utils.test_backfill" name="test_date_validation" time="0.003" /><testcase classname="tests.utils.test_backfill" name="test_validate_regex_pattern" time="0.001" /><testcase classname="tests.utils.test_backfill" name="test_generate_backfill_command" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_valid_impact_tag[impact/tier_1-impact/tier_1]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_valid_impact_tag[impact/tier_2-impact/tier_2]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_valid_impact_tag[impact/tier_3-impact/tier_3]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_get_impact_tag[Tag.ImpactTier-tier_1-impact/tier_1]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_get_impact_tag[Tag.ImpactTier-tier_2-impact/tier_2]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_get_impact_tag[Tag.ImpactTier-tier_3-impact/tier_3]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_invalid_impact_tag[tier_4]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_invalid_impact_tag[]" time="0.001" /><testcase classname="tests.utils.test_tags" name="test_invalid_impact_tag[bq-etl]" time="0.001" /></testsuite></testsuites>