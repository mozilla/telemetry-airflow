# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
# GAR_SERVICE_KEY
#
# GCLOUD_SERVICE_KEY - key for gsutil rsync bootstrap and jobs with gcs
# GOOGLE_PROJECT_ID - airflow-dataproc
# GOOGLE_COMPUTE_ZONE - us-west1-b

version: 2.1
orbs:
  docker: circleci/docker@2.5.0
  python: circleci/python@2.1.1

parameters:
  python-version:
    type: string
    default: '3.11.8'

jobs:
  unit-tests:
    executor: &python-executor
      name: python/default
      tag: << pipeline.parameters.python-version >>
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run:
          name: 🧪 Pytest
          command: python -m pytest --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results

  test-local-environment:
    executor:
      name: docker/machine
      image: ubuntu-2204:2023.04.2
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: artifacts
      - docker/install-docker-compose:
          version: v2.17.3
      - run:
          name: Load Docker image artifact from previous job
          command: docker load -i artifacts/telemetry-airflow.tar
      - run:
          name: Override docker-compose.yaml with artifact
          command: |
            sed -i "s/  build: ./  image: $CIRCLE_PROJECT_REPONAME:${CIRCLE_SHA1:0:9}/g" docker-compose.yml
      - run:
          name: Start up local environment
          command: |
            pip3 install cryptography -c constraints.txt
            make up

  black:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run: &git-diff-py-files
          name: List added, copied, modified, and renamed *py files
          command: git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: List black errors
          command: black . --check &> lint_checks.txt || true
      - run:
          name: 🧹 Diff-based black
          command: &display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch:\n make fixes'
              exit 1
            fi

  ruff:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run: *git-diff-py-files
      - run:
          name: List ruff errors
          command: ruff check . &> lint_checks.txt || true
      - run:
          name: 🧹 Diff-based ruff
          command: *display-lint-errors

  validate-requirements:
    executor: *python-executor
    steps:
      - checkout
      - run:
          name: 🧪 Verify requirements.txt is sync'ed with requirements.in
          command: |
            pip install pip-tools
            pip-compile --quiet --strip-extras --no-annotate
            git diff --exit-code requirements.txt

  docker-build-artifact:
    executor: docker/machine
    steps:
      - checkout
      - run:
          name: Generate build version.json
          command: >
            printf
            '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
            "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_PROJECT_USERNAME"
            "$CIRCLE_PROJECT_REPONAME" "$CIRCLE_BUILD_URL"
            > version.json
      - run:
          name: Output version.json
          command: cat version.json
      - docker/build:
          image: $CIRCLE_PROJECT_REPONAME
          tag: ${CIRCLE_SHA1:0:9}
      - run:
          name: Persist image
          command: |
            mkdir -p artifacts
            docker save -o artifacts/telemetry-airflow.tar $CIRCLE_PROJECT_REPONAME:${CIRCLE_SHA1:0:9}
      - persist_to_workspace:
          root: artifacts
          paths:
            - telemetry-airflow.tar

  publish-registry:
    executor: docker/machine
    parameters:
      image_tag:
        type: string
      registry:
        type: string
      registry_authentication:
        default: []
        description: Steps required to authenticate on targeted registry
        type: steps
    steps:
      - checkout
      - when:
          condition: <<parameters.registry_authentication>>
          steps: <<parameters.registry_authentication>>
      - attach_workspace:
          at: artifacts
      - run:
          name: Load Docker image artifact from previous job
          command: docker load -i artifacts/telemetry-airflow.tar
      - run:
          name: Generate image name
          command: |
            echo 'export PARAM_REGISTRY="<< parameters.registry >>"' >> "$BASH_ENV"
            echo 'export PARAM_IMAGE_TAG="<< parameters.image_tag >>"' >> "$BASH_ENV"
            echo 'export IMAGE_NAME="$CIRCLE_PROJECT_REPONAME"' >> "$BASH_ENV"
      - run:
          name: Re-tag artifact
          command: docker tag $CIRCLE_PROJECT_REPONAME:${CIRCLE_SHA1:0:9} $PARAM_REGISTRY/$IMAGE_NAME:$PARAM_IMAGE_TAG
      - docker/push:
          step-name: Push image to registry
          image: $IMAGE_NAME
          tag: $PARAM_IMAGE_TAG
          registry: $PARAM_REGISTRY

  sync_gcs:
    docker:
      - image: gcr.io/google.com/cloudsdktool/cloud-sdk:323.0.0
    working_directory: ~/mozilla/telemetry-airflow
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gsutil rsync -d -r dataproc_bootstrap gs://moz-fx-data-prod-airflow-dataproc-artifacts/bootstrap
          gsutil rsync -d -r jobs gs://moz-fx-data-prod-airflow-dataproc-artifacts/jobs

  sync-dags-repo:
    executor: docker/machine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e4:30:50:41:53:f0:d6:3a:bb:c9:38:54:2d:ca:56:41"
      - run:
          name: 🤖 Update DAGs repository
          command: |
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.email "dataops@mozilla.com"
            git config --global user.name "CircleCI Job"
            git clone --branch main git@github.com:mozilla/telemetry-airflow-dags.git
            cd ~/project/telemetry-airflow-dags
            git submodule update --init --recursive --depth 1 telemetry-airflow
            cd ${CIRCLE_PROJECT_REPONAME}
            git pull origin dags
            cd ..
            git add ${CIRCLE_PROJECT_REPONAME}
            git commit --allow-empty -m "Automatic commit from ${CIRCLE_PROJECT_REPONAME} commit ${CIRCLE_SHA1:0:9} build ${CIRCLE_BUILD_NUM} [skip ci]"
            git push origin main

  sync-dags-branch:
    executor: docker/machine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "66:9a:9f:55:2b:5c:f5:d6:ea:c5:c4:f9:7b:db:8d:c0"
      - run:
          name: 🤖 Update DAGs branch
          command: |
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.name "CircleCI job"
            git config --global user.email "dataops@mozilla.com"
            git clone --branch dags git@github.com:mozilla/telemetry-airflow.git \
              dags-branch
            cd dags-branch/
            rm -rf dags/
            cp -r ~/project/dags dags
            git add .
            git commit -m "Automatic commit - DAGs from commit ${CIRCLE_SHA1:0:9} build ${CIRCLE_BUILD_NUM} [skip ci]" \
              && git push \
              || echo "Skipping push since it looks like there were no changes"

workflows:
  ci:
    jobs:
      - validate-requirements:
          name: 🧪 Validate requirements
          filters: &ci-filter
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - docker-build-artifact:
          name: 🛠️ Docker build test
          filters: *ci-filter

      - test-local-environment:
          name: 🧪 Validate local environment
          filters: *ci-filter
          requires:
            - 🛠️ Docker build test

      - black:
          name: ⚫ black
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements
      - ruff:
          name: 🚓 ruff
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements

      - unit-tests:
          name: 🧪 Unit tests
          filters: *ci-filter
          requires:
            - ⚫ black
            - 🚓 ruff

  publish:
    jobs:
      - docker-build-artifact:
          name: 🛠️ Docker build and persist image
          filters:
            tags:
              only: /.*/
            branches:
              only: main

      - publish-registry:
          name: Publish latest to Dockerhub
          registry: mozilla
          image_tag: latest
          registry_authentication: &mozilla-auth
            - docker/check:
                docker-password: DOCKER_PASS
                docker-username: DOCKER_USER
          requires:
            - 🛠️ Docker build and persist image
          filters:
            tags:
              only: /.*/
            branches:
              only: main

      - publish-registry:
          name: Publish tag to Dockerhub
          registry: mozilla
          image_tag: $CIRCLE_TAG
          registry_authentication: *mozilla-auth
          requires:
            - 🛠️ Docker build and persist image
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

      - publish-registry:
          name: Publish latest to GAR
          registry: us-docker.pkg.dev/moz-fx-telemetry-airflow-prod/telemetry-airflow-prod
          image_tag: latest
          registry_authentication: &gar-auth
            - run:
                name: Authenticate GAR
                command: |
                  echo $GAR_SERVICE_KEY | base64 -d > creds.json
                  gcloud auth activate-service-account --key-file creds.json
                  gcloud auth configure-docker us-docker.pkg.dev
          requires:
            - 🛠️ Docker build and persist image
          filters:
            tags:
              only: /.*/
            branches:
              only: main

      - publish-registry:
          name: Publish tag to GAR
          registry: us-docker.pkg.dev/moz-fx-telemetry-airflow-prod/telemetry-airflow-prod
          image_tag: $CIRCLE_TAG
          registry_authentication: *gar-auth
          requires:
            - 🛠️ Docker build and persist image
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

      - sync_gcs:
          filters:
            tags:
              only: /.*/
            branches:
              only: main

      - sync-dags-branch:
          name: 🔃 Update DAGs branch
          filters:
            branches:
              only: main

      - sync-dags-repo:
          name: 🔃 Synchronize telemetry-airflow-dags repository
          filters:
            branches:
              only: main
          requires:
            - 🔃 Update DAGs branch

