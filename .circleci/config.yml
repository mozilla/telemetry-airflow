# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
# GCLOUD_SERVICE_KEY - key for gsutil rsync bootstrap and jobs with gcs
# GOOGLE_PROJECT_ID - airflow-dataproc
# GOOGLE_COMPUTE_ZONE - us-west1-b

version: 2.1
orbs:
  docker: circleci/docker@2.2.0
  python: circleci/python@2.1.1

jobs:
  unit-tests:
    executor: &python-executor
      name: python/default
      tag: 3.8.12
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run:
          name: 🧪 Pytest
          command: python -m pytest --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results

  isort:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run:
          name: List added, copied, modified, and renamed *py files
          command: git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > changed.txt || true
      - run:
          name: List isort errors
          command: isort . --check &> isort_checks.txt || true
      - run:
          name: 🧹 Diff-based isort
          command: |
            grep -Ff changed.txt isort_checks.txt > problematic_files.txt || true
            if [ -s problematic_files.txt ]; then
              cat problematic_files.txt
              printf 'Run the following command to fix your branch:\n isort $(git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)")'
              exit 1
            fi

  black:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run:
          name: List added, copied, modified, and renamed *py files
          command: git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > changed.txt || true
      - run:
          name: List black errors
          command: black . --check &> black_checks.txt || true
      - run:
          name: 🧹 Diff-based black
          command: |
            grep -Ff changed.txt black_checks.txt > problematic_files.txt || true
            if [ -s problematic_files.txt ]; then
              cat problematic_files.txt
              printf 'Run the following command to fix your branch:\n black $(git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)")'
              exit 1
            fi

  ruff:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      - run:
          name: List added, copied, modified, and renamed *py files
          command: git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > changed.txt || true
      - run:
          name: List ruff errors
          command: ruff check . &> ruff_checks.txt || true
      - run:
          name: 🧹 Diff-based ruff
          command: |
            grep -Ff changed.txt ruff_checks.txt > problematic_files.txt || true
            if [ -s problematic_files.txt ]; then
              cat problematic_files.txt
              printf 'Run the following command to fix your branch:\n ruff check $(git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)") --fix'
              exit 1
            fi

  validate-requirements:
    executor: *python-executor
    steps:
      - checkout
      - run:
          name: 🧪 Verify requirements.txt is sync'ed with requirements.in
          command: |
            pip install pip-tools
            pip-compile --quiet
            git diff --exit-code requirements.txt

  sync_gcs:
    docker:
      - image: gcr.io/google.com/cloudsdktool/cloud-sdk:323.0.0
    working_directory: ~/mozilla/telemetry-airflow
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gsutil rsync -d -r dataproc_bootstrap gs://moz-fx-data-prod-airflow-dataproc-artifacts/bootstrap
          gsutil rsync -d -r jobs gs://moz-fx-data-prod-airflow-dataproc-artifacts/jobs


workflows:
  ci:
    jobs:
      - validate-requirements:
          name: 🧪 Validate requirements
          filters: &ci-filter
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - docker/publish:
          name: 🛠️ Docker build test
          before_build: &version
            - run:
                name: Generate build version.json
                command: >
                  printf 
                  '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' 
                  "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_PROJECT_USERNAME" 
                  "$CIRCLE_PROJECT_REPONAME" "$CIRCLE_BUILD_URL" 
                  > version.json
            - run:
                name: Output version.json
                command: cat version.json
          deploy: false
          image: $CIRCLE_PROJECT_REPONAME
          tag: ${CIRCLE_SHA1:0:9}
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements
      - isort:
          name: 🧹 isort
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements
      - black:
          name: ⚫ black
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements
      - ruff:
          name: 🚓 ruff
          filters: *ci-filter
          requires:
            - 🧪 Validate requirements

      - unit-tests:
          name: 🧪 Unit tests
          filters: *ci-filter
          requires:
            - 🧹 isort
            - ⚫ black
            - 🚓 ruff

  publish:
    jobs:
      - docker/publish:
          name: Push latest
          before_build: *version
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          image: mozilla/telemetry-airflow
          tag: latest
          filters:
            branches:
              only: main

      - docker/publish:
          name: Push tag
          before_build: *version
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          image: mozilla/telemetry-airflow
          tag: $CIRCLE_TAG
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

      - sync_gcs:
          filters:
            tags:
              only: /.*/
            branches:
              only: main
